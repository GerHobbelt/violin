// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require(['underscore', 'graph', 'backbone', 'instrumentor'], function(_, Graph, Backbone, Instrumentor) {
    window.App = {
      Views: {}
    };
    App.Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        this.render = __bind(this.render, this);
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.events = {
        'hover': 'onHover',
        'click': 'onClick'
      };

      ListItem.prototype.tagName = 'li';

      ListItem.prototype.onHover = function() {
        return console.log('hovered');
      };

      ListItem.prototype.onClick = function() {
        return console.log('click');
      };

      ListItem.prototype.render = function() {
        console.log(this.options);
        $(this.el).append(this.options.model.get('text'));
        return this;
      };

      return ListItem;

    })(Backbone.View);
    App.Views.ListView = (function(_super) {

      __extends(ListView, _super);

      function ListView() {
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.tagName = 'ul';

      ListView.prototype.initialize = function() {
        return this.models = new Backbone.Collection([
          {
            text: 'Hi'
          }, {
            text: 'There'
          }, {
            text: 'Boo'
          }, {
            text: 'Yah'
          }
        ]);
      };

      ListView.prototype.render = function() {
        var _this = this;
        this.models.each(function(model) {
          return $(_this.el).append(new App.Views.ListItem({
            model: model
          }).render().el);
        });
        return this;
      };

      return ListView;

    })(Backbone.View);
    App.init = function() {
      var list;
      list = new App.Views.ListView();
      list.render();
      console.log(list);
      return $('#content').append(list.el);
    };
    new Instrumentor(App);
    return App.init();
  });

}).call(this);
