// Generated by CoffeeScript 1.3.3
(function() {

  define(['d3'], function(d3) {
    var Graph;
    Graph = (function() {

      function Graph(nodes, links) {
        this.height = 600;
        this.width = 430;
        this.nodes = nodes;
        this.links = links;
        this.rendered = false;
      }

      Graph.prototype.setupForce = function() {
        return this.force = d3.layout.force().charge(-200).linkDistance(30).size([this.width, this.height]);
      };

      Graph.prototype.setupSVG = function() {
        return this.svg = d3.select('#chart').append('svg').attr('width', this.width).attr('height', this.height);
      };

      Graph.prototype.setupLegend = function() {
        var items, legend, litems;
        legend = this.svg.append('svg:g').attr('class', 'legend').attr('transform', "translate(20,20)");
        console.log(legend);
        items = [
          {
            t: 'object'
          }, {
            t: 'function'
          }, {
            t: 'constructor'
          }, {
            t: 'instantiation'
          }
        ];
        litems = legend.selectAll('.legend-item').data(items).enter().append('svg:g').attr('class', function(d) {
          return d.t + ' legend-item';
        });
        litems.append('circle').attr('r', 5);
        litems.append('text').text(function(d) {
          return d.t;
        }).attr('dy', 5).attr('dx', 10);
        return litems.attr('transform', function(d, i) {
          return "translate(0, " + (i * 20) + ")";
        });
      };

      Graph.prototype.setupGraph = function() {
        var entered, enteredLinks;
        this.force.nodes(this.nodes).links(this.links);
        this.link = this.svg.selectAll('line.link').data(this.links, function(d) {
          return "" + d.source.id + "-" + d.target.id;
        });
        enteredLinks = this.link.enter();
        enteredLinks.append('line').attr('class', 'link').style('stroke-width', 2);
        this.node = this.svg.selectAll('.node').data(this.nodes, function(d) {
          return d.id;
        });
        entered = this.node.enter().append('g').attr('class', function(d) {
          var c;
          return c = "node " + d.group;
        }).call(this.force.drag);
        entered.append('circle').attr('cx', 0).attr('cy', 0).attr('r', 5);
        entered.append('text').attr('dx', 0).attr('dy', '1.2em').text(function(d) {
          return d.name;
        });
        return this.force.start();
      };

      Graph.prototype.onTick = function() {
        var _this = this;
        return this.force.on('tick', function(t) {
          _this.link.attr('x1', function(d) {
            return d.source.x;
          }).attr('y1', function(d) {
            return d.source.y;
          }).attr('x2', function(d) {
            return d.target.x;
          }).attr('y2', function(d) {
            return d.target.y;
          });
          return _this.node.attr('transform', function(d) {
            return "translate(" + d.x + ", " + d.y + ")";
          });
        });
      };

      Graph.prototype.render = function() {
        this.setupForce();
        this.setupSVG();
        this.setupLegend();
        this.setupGraph();
        this.onTick();
        this.rendered = true;
        return this;
      };

      Graph.prototype.triggerNode = function(node) {
        var updated;
        updated = this.node.data([node], function(d) {
          return d.id;
        });
        return updated.selectAll('circle').transition().duration(200).attr('r', 25).transition().delay(200).duration(200).attr('r', 5);
      };

      Graph.prototype.updateNodes = function(nodes, links) {
        this.nodes = nodes;
        this.links = links;
        return this.setupGraph();
      };

      return Graph;

    })();
    return Graph;
  });

}).call(this);
